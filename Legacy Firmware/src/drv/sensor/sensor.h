/***************************************************************************//**
 * @file        sensor.h
 * @author      Created: CLU
 *              $Author: CLU $
 *              $LastChangedRevision: 440 $
 *              $LastChangedDate: 2010-05-20 09:59:35 +0200 (Do, 20 Mai 2010) $
 * @brief       Treiber für den hall sensor
 ******************************************************************************/

#ifndef SENSOR_H
#define SENSOR_H

/******************************************************************************
 Imported Include References
******************************************************************************/
#include "common.h"

#define SENSOR_MAX_NUM_ANGLES   8

/**************************************************************************//**
 * @brief    sensor_enableOutput
 *****************************************************************************/
void sensor_enableOutput(u8 output, u8 numAngles);

/**************************************************************************//**
 * @brief    sensor_disableOutput
 *****************************************************************************/
void sensor_disableOutput(u8 output);

/**************************************************************************//**
 * @brief    sensor_setAngle
 *****************************************************************************/
void sensor_setAngle(u8 output, u8 angle, u16 angleOn, u16 angleOff);

/**************************************************************************//**
 * @brief    sensor_rotateAngle
 *           Sollte im millisekunden takt aufgerufen werden
 *****************************************************************************/
void sensor_rotateAngle(u8 output, u8 angle, s16 w);

/**************************************************************************//**
 * @brief    sensor_setPwm
 *****************************************************************************/
void sensor_setPwm(u8 output, u8 angle, u8 pwm);

/**************************************************************************//**
 * @brief    sensor_active
 *****************************************************************************/
bool sensor_active(void);

/**************************************************************************//**
 * @brief    callback für recv um sensor bei einem flankeninterrupt aufzurufen
 *****************************************************************************/
void sensor_callback(u16 timValue);

/**************************************************************************//**
 * @brief    aufgerufen beim überlauf des timers
 *****************************************************************************/
void sensor_timeout(void);

/**************************************************************************//**
 * @brief    aufgerufen im mainloop
 *****************************************************************************/
void sensor_hisr(void);

/**************************************************************************//**
 * @brief    berechnet umdrehungen pro minute
 *****************************************************************************/
u16 sensor_getRPM(void);

/**************************************************************************//**
 * @brief    initialisierung
 *           muss nach der initialisierung von recv gemacht werden
 *****************************************************************************/
void sensor_init(void);

#endif //SENSOR_H

